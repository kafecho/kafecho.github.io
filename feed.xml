<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Guillaume's musings</description>
    <link>http://www.soundcode.co.za/</link>
    <atom:link href="http://www.soundcode.co.za/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 18 Jun 2017 17:12:05 +0200</pubDate>
    <lastBuildDate>Sun, 18 Jun 2017 17:12:05 +0200</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>Simple visuals with the Web Audio API</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post, we are going to be looking at some cool stuff that you can do with the Web Audio API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_context&quot;&gt;Context&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a inspiring musician, I like all things related to sound.
I don&amp;#8217;t do an amazing amount of JavaScript on a regular basis, but the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API&quot;&gt;Web Audio API&lt;/a&gt; is one of my favourites browser APIs ever.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It gives you elegant (and clock-accurate) APIs for &lt;strong&gt;creating&lt;/strong&gt;, &lt;strong&gt;playing&lt;/strong&gt; and &lt;strong&gt;analysing&lt;/strong&gt; sounds.
You can use it to play audio samples with very high precision, create music from elemental waves, and even do very cheap Fast Fourier Transforms.
In this post, we are going to see how to build a simple volume meter using the Web Audio API and some HTML5 canvas objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For some more background information see:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://chimera.labs.oreilly.com/books/1234000001552/ch03.html&quot; class=&quot;bare&quot;&gt;http://chimera.labs.oreilly.com/books/1234000001552/ch03.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.smartjava.org/content/exploring-html5-web-audio-visualizing-sound&quot; class=&quot;bare&quot;&gt;http://www.smartjava.org/content/exploring-html5-web-audio-visualizing-sound&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and for some really awesome demos, go to &lt;a href=&quot;http://webaudiodemos.appspot.com/&quot; class=&quot;bare&quot;&gt;http://webaudiodemos.appspot.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_approaches&quot;&gt;Approaches&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to analyse the volume of a video clip, we essentially need to get hold of the audio samples (the waveform) at a given point in time.
We can then look at the peak value of the amplitude function. If the absolute value of the amplitude is too high, then the sound is likely to end up being distorted, which is what we want to avoid.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Web Audio API allows you to build an audio processing chain from a variety of sources, including HTML5 players.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Web Audio API provides 2 mechanisms for finding the waveform:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;use a ScriptProcessorNode &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode&quot; class=&quot;bare&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use an AnalyserNode &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode&quot; class=&quot;bare&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode&lt;/a&gt; that is based on a fast Fourier transform (FFT) with a given sample size.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve decided to use an AnalyserNode for the various reasons:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the ScriptProcessorNode has a deprecation warning&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it slows things down as it runs all the time (whenever there is audio available to be processed)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it is hard to chain with other nodes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The AnalyserNode is a lot more user friendly, but has to be ran on demand, so basically the recommendation is to run it within a &lt;strong&gt;requestAnimationFrame&lt;/strong&gt; cycle.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_using-the-analyser-node&quot;&gt;Using the Analyser node&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Given an audio source, an analyser node would mix all available channels prior to analysis, so in order to preserve the information relevant to the various channels, we have to use a channel splitter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;var&lt;/span&gt; audioContext  &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; (&lt;span style=&quot;color: #008000&quot;&gt;window&lt;/span&gt;.AudioContext);
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;var&lt;/span&gt; videoPlayer   &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008000&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;video&amp;quot;&lt;/span&gt;);
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;var&lt;/span&gt; source        &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; audioContext.createMediaElementSource(videoPlayer);
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;var&lt;/span&gt; splitter      &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; audioContext.createChannelSplitter(&lt;span style=&quot;color: #666666&quot;&gt;2&lt;/span&gt;);

source.connect(splitter);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the code above, we create an audio source from an HTML5 video player and split the channel into left and right.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For test purposes (for example to trigger a distortion), I pipe the left and right channels to amplifier nodes (gain nodes).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;var&lt;/span&gt; leftChannelGain    &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; audioContext.createGain();
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;var&lt;/span&gt; rightChannelGain   &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; audioContext.createGain();

leftChannelGain.gain.value &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;;
rightChannelGain.gain.value &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;;

splitter.connect(leftChannelGain, &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;);
splitter.connect(rightChannelGain, &lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the example above, the gain is set to 1 (i.e. volume unchanged, but setting it to a higher value will cause distortions.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next step is to create analyser nodes for the left and right channels.
Each analyser is connected to its source to a gain node. The output of each analyser is merged back to the destination so it can be played back via the output device.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;var&lt;/span&gt; leftChannelAnalyser &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; audioContext.createAnalyser();
leftChannelAnalyser.fftSize &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; fftSize;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;var&lt;/span&gt; leftChannelTimeData &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; Float32Array(leftChannelAnalyser.fftSize);

&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;var&lt;/span&gt; rightChannelAnalyser &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; audioContext.createAnalyser();
rightChannelAnalyser.fftSize &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; fftSize;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;var&lt;/span&gt; rightChannelTimeData &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; Float32Array(rightChannelAnalyser.fftSize);

leftChannelGain.connect (leftChannelAnalyser);
rightChannelGain.connect (rightChannelAnalyser);

&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;var&lt;/span&gt; merger      &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; audioContext.createChannelMerger(&lt;span style=&quot;color: #666666&quot;&gt;2&lt;/span&gt;);

leftChannelAnalyser.connect(merger, &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;);
rightChannelAnalyser.connect(merger, &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;);

merger.connect(audioContext.destination);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Web Audio API graph is very flexible, so the various nodes can be wired differently.
I just chose this structure because, well  &lt;strong&gt;¯_(ツ)_/¯&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At each analysis, the time-domain waveform is available as a Float32Array whose values are normally between [-1, 1] (this is a mapping of a 32bit), where the (absolute) value of 1 is considered as an acceptable limit.
If the gain on a channel is too high, the number can be higher than 1, in this case, a distortion is likely to occur.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The [-1, 1] range is actually a mapping to the range expressed with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/minDecibels&quot; class=&quot;bare&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/minDecibels&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/maxDecibels&quot; class=&quot;bare&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/maxDecibels&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that those decibel values &lt;strong&gt;don&amp;#8217;t correspond&lt;/strong&gt; to the gain (as in the amplification factor). Basically they refer to the dBFS (decibel full scale, as described in more details in &lt;a href=&quot;http://chimera.labs.oreilly.com/books/1234000001552/ch03.html&quot; class=&quot;bare&quot;&gt;http://chimera.labs.oreilly.com/books/1234000001552/ch03.html&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a digital VU meter, the maximum volume is set at 0db, anything beyond down will result in audio clipping. See this for more information: &lt;a href=&quot;https://documentation.apple.com/en/finalcutpro/usermanual/index.html#chapter=54%26section=1%26tasks=true&quot; class=&quot;bare&quot;&gt;https://documentation.apple.com/en/finalcutpro/usermanual/index.html#chapter=54%26section=1%26tasks=true&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can use a simple function to find the peak &quot;volume&quot; for a given array.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;var&lt;/span&gt; findPeak &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;function&lt;/span&gt;(array){
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;var&lt;/span&gt; peak &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;;
    array.forEach(&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;function&lt;/span&gt;(value){
        peak &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008000&quot;&gt;Math&lt;/span&gt;.max( peak, &lt;span style=&quot;color: #008000&quot;&gt;Math&lt;/span&gt;.abs(value));
    });
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;return&lt;/span&gt; peak;
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to graph the peak volume, we use 2 canvas elements (1 per channel) that uses gradient between shades of green, orange and red (where red indicates likely audio clipping).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;var&lt;/span&gt; leftPeakMeterCanvas &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008000&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;left-peak-meter&amp;quot;&lt;/span&gt;);
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;var&lt;/span&gt; leftPeakMeterContext &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; leftPeakMeterCanvas.getContext(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;2d&amp;quot;&lt;/span&gt;);
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;var&lt;/span&gt; leftPeakMeterGradient &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; leftPeakMeterContext.createLinearGradient(&lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #666666&quot;&gt;200&lt;/span&gt;, &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;);
leftPeakMeterGradient.addColorStop(&lt;span style=&quot;color: #666666&quot;&gt;0.5&lt;/span&gt;, &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;green&amp;quot;&lt;/span&gt;);
leftPeakMeterGradient.addColorStop(&lt;span style=&quot;color: #666666&quot;&gt;0.8&lt;/span&gt;, &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;orange&amp;quot;&lt;/span&gt;);
leftPeakMeterGradient.addColorStop(&lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;, &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;red&amp;quot;&lt;/span&gt;);
leftPeakMeterContext.fillStyle &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; leftPeakMeterGradient;

&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;var&lt;/span&gt; rightPeakMeterCanvas &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008000&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;right-peak-meter&amp;quot;&lt;/span&gt;);
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;var&lt;/span&gt; rightPeakMeterContext &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; rightPeakMeterCanvas.getContext(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;2d&amp;quot;&lt;/span&gt;);
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;var&lt;/span&gt; rightPeakMeterGradient &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; rightPeakMeterContext.createLinearGradient(&lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #666666&quot;&gt;200&lt;/span&gt;, &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;);
rightPeakMeterGradient.addColorStop(&lt;span style=&quot;color: #666666&quot;&gt;0.5&lt;/span&gt;, &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;green&amp;quot;&lt;/span&gt;);
rightPeakMeterGradient.addColorStop(&lt;span style=&quot;color: #666666&quot;&gt;0.8&lt;/span&gt;, &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;orange&amp;quot;&lt;/span&gt;);
rightPeakMeterGradient.addColorStop(&lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;, &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;red&amp;quot;&lt;/span&gt;);
rightPeakMeterContext.fillStyle &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; rightPeakMeterGradient;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last stage is to compute the analysis on a regular basis, get the time domain data, find the peak volume, graph it and report when it goes over a certain limit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;function&lt;/span&gt; analyse(){
    leftChannelAnalyser.getFloatTimeDomainData(leftChannelTimeData);
    rightChannelAnalyser.getFloatTimeDomainData(rightChannelTimeData);

    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;var&lt;/span&gt; leftChannelPeak &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; findPeak(leftChannelTimeData);
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;var&lt;/span&gt; rightChannelPeak &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; findPeak(rightChannelTimeData);

    leftPeakMeterContext.clearRect(&lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;, leftPeakMeterCanvas.width, leftPeakMeterCanvas.height);
    leftPeakMeterContext.fillRect(&lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #008000&quot;&gt;Math&lt;/span&gt;.min(leftPeakMeterCanvas.width, leftChannelPeak &lt;span style=&quot;color: #666666&quot;&gt;*&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;200&lt;/span&gt;), leftPeakMeterCanvas.height);

    rightPeakMeterContext.clearRect(&lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;, rightPeakMeterCanvas.width, rightPeakMeterCanvas.height);
    rightPeakMeterContext.fillRect(&lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #008000&quot;&gt;Math&lt;/span&gt;.min(rightPeakMeterCanvas.width, rightChannelPeak &lt;span style=&quot;color: #666666&quot;&gt;*&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;200&lt;/span&gt;), rightPeakMeterCanvas.height);

    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;if&lt;/span&gt; (leftChannelPeak &lt;span style=&quot;color: #666666&quot;&gt;&amp;gt;=1&lt;/span&gt;){
        console.log(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Left channel is too loud&amp;quot;&lt;/span&gt;, leftChannelPeak);
    }

    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;if&lt;/span&gt; (rightChannelPeak &lt;span style=&quot;color: #666666&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;){
        console.log(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Right channel is too loud&amp;quot;&lt;/span&gt;, rightChannelPeak);
    }

    requestAnimationFrame( analyse );
}
analyse();
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_et-voila&quot;&gt;Et voila.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That is it, the code is super simple!!!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using an Analyser Node, you can also extract frequency domain information. So if you want to display a frequency spectrum or any other visuals, that is very simple to do.
Just get hold of the waveform data, plot stuff on canvases (or using WebGL) and off you go.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Fri, 16 Jun 2017 00:00:00 +0200</pubDate>
        <link>http://www.soundcode.co.za/javascript/2017/06/16/visuals-with-the-web-audio-api.html</link>
        <guid isPermaLink="true">http://www.soundcode.co.za/javascript/2017/06/16/visuals-with-the-web-audio-api.html</guid>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>Ansible roles</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post, I am going to talk about some of the Ansible roles that I&amp;#8217;ve built over the years. This post is written from the point of view of a Software Engineer, so think &lt;strong&gt;Dev&lt;/strong&gt; Ops.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_once-upon-a-time&quot;&gt;Once upon a time&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I started working with Ansible back in 2012, the year when it was initially released.
At the time, I was mostly doing software engineering and I was amazed at how simple Ansible was as I could quickly build configuration management solutions to deploy and manage the software I had written.
Over the years, I&amp;#8217;ve accumulated written quite a few playbooks and re-usable roles which is what I am going to talk about today.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what-is-a-role&quot;&gt;What is a role?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In case you don&amp;#8217;t know what a &lt;a href=&quot;http://docs.ansible.com/ansible/playbooks_roles.html&quot;&gt;role&lt;/a&gt; is, you can think of it as a reusable set of instructions which you can use to manage a particular set of configurations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, if you work in Java, Scala or Clojure, you will need a JDK installed to run your software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes, it is easy, and you just delegate to your OS package manager to do it for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes you have to go through a bunch of hoops in order to make it work (as it is the case with the Oracle JDK).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Luckily, Ansible lets you easily capture those hoops into a &lt;strong&gt;LEGO-block&lt;/strong&gt; style set of instructions which you can apply anywhere you want. This is the essence of a role.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_operating-systems&quot;&gt;Operating Systems&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I can&amp;#8217;t verify this scientifically, but I think the vast majority of Ansible users are using it to setup and manage Linux systems (CentOS, Ubuntu, etc..).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are exceptions of course, with people like &lt;a href=&quot;http://hindenes.com/trondsworking/&quot;&gt;Trond Hindenese&lt;/a&gt; and &lt;a href=&quot;https://www.ansible.com/ansible-2-windows&quot;&gt;Jon Hawkesworth&lt;/a&gt; doing amazing work to promote Ansible on Windows.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The vast majority of roles that I&amp;#8217;ve written are for CentOS, although I&amp;#8217;ve also written quite a few Ansible roles as well, and even roles which are OS and OS distribution agnostic.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_stuff-i-ve-done-on-windows&quot;&gt;Stuff I&amp;#8217;ve done on Windows&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is a non exhaustive list of roles that I&amp;#8217;ve written for Windows&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Oracle JDK: downloads and installs a particular version of the Oracle JDK so I can run JVM-based applications&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apache Commons Daemon: so that I can run JVM apps as Windows service&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://nssm.cc/&quot;&gt;NSSM&lt;/a&gt;: another tool for running anything as a Windows service&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solr and SolrCloud: combine some of the roles above to run Solr as a Service on Windows&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MySQL: installs and configure MySQL with a given profile and database settings&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CouchDB: installs and configure CouchDB instances and setup up databases with replication. This is done with CouchDB 1.6.x&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_stuff-i-ve-done-on-linux&quot;&gt;Stuff I&amp;#8217;ve done on Linux&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is a non exhaustive list of roles that I&amp;#8217;ve built for Linux&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Oracle JDK, again Oracle does not make life easy, but Ansible does&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jenkins&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vagrant (for creating VMs on demand)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CouchDB, including CouchDB 1.6 and CouchDB 2.x (and some BigCouch)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zookeeper for easily setting up Zookeeper clusters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solr and SolrCloud&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Elastic Search, Kibana, Logstash&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;InfluxDB and Grafana&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HAProxy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.keepalived.org/&quot;&gt;Keepalived&lt;/a&gt; as a generic mechanism for providing failover for processes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clusters with &lt;a href=&quot;http://clusterlabs.org/doc/&quot;&gt;Pacemaker&lt;/a&gt;, Corosync and &lt;a href=&quot;https://docs.linbit.com/&quot;&gt;DRBD&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Monit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.icinga.com/products/icinga-2/&quot;&gt;Icinga2&lt;/a&gt; where Ansible is used throughout from installing the software to configuring hosts, groups, checks and alerts. In one facility this is used to monitor up to &lt;strong&gt;160 machines!!&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some custom roles to interact with hardware equipement used in television facilities&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_automate-all-the-things&quot;&gt;Automate all the things&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main purpose of the Ansible roles is to &lt;strong&gt;automate as much as possible&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, I built a &lt;strong&gt;Continuous Delivery pipeline&lt;/strong&gt; pretty much entirely from roles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ansible is used throughout, from deploying and configuring Jenkins to managing the virtual infrastructure that Jenkins uses for building and testing software.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_complex-made-easy&quot;&gt;Complex made easy&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ansible makes what seems like complicated things &lt;strong&gt;very very easy&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, setting up a SolrCloud cluster on 5 machines backed with a Zookeeper ensemble is actually a matter of putting the right LEGO blocks together.
Setting a resilient load-balanced website is actually easy once you have the right pieces in place (HAProxy, Keepalived).
And the nice thing is you can use the same pieces to build other kinds of resilient deployments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some of the roles that I&amp;#8217;ve written have been used in rather complex deployment topologies, for example for &lt;strong&gt;resilience&lt;/strong&gt; and &lt;strong&gt;disaster recovery&lt;/strong&gt; purposes.
The nice thing is that the role did not have to change (most of the work went into the design of Ansible inventories), so the same role that can be used on my laptop also works when used in a datacenter environment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_it-s-all-in-the-code&quot;&gt;It&amp;#8217;s all in the code&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ansible roles keep everything in one place. The code is self explanatory (with the use of comments), so if you want to know how something is deployed, instead of reading documentation or watching a tutorial, just look at the .YAML files and you are good to go.
I get back to roles that I have written 5 years ago, and the intent is still very clear, because of the documentation, but also because of the declarative YAML syntax.
It just reads as easy as &lt;strong&gt;written instructions&lt;/strong&gt; but with the added benefit of being &lt;strong&gt;executable instructions&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_parting-words&quot;&gt;Parting words&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope that you&amp;#8217;ve enjoyed this post, please get in touch with me (kafecho at gmail dot com) if you want to find out more, or need help with your deployments.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Sat, 27 May 2017 00:00:00 +0200</pubDate>
        <link>http://www.soundcode.co.za/ansible/2017/05/27/ansible-roles.html</link>
        <guid isPermaLink="true">http://www.soundcode.co.za/ansible/2017/05/27/ansible-roles.html</guid>
        
        
        <category>Ansible</category>
        
      </item>
    
      <item>
        <title>Introduction to Elm</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Back in April, I gave an &lt;a href=&quot;https://www.meetup.com/lambda-luminaries/events/237238223/&quot;&gt;Introduction to Elm&lt;/a&gt; talk at the Johannesburg-based Lambda Luminaries Meetup hosted by &lt;a href=&quot;https://www.jemstep.com/en&quot;&gt;Invesco Jemstep&lt;/a&gt;.
My talk was roughly structured like the official &lt;a href=&quot;https://guide.elm-lang.org/install.html&quot;&gt;Elm tutorial&lt;/a&gt; and I used a mixture of slides and demos to explain various concepts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_talk-structure&quot;&gt;Talk structure&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I covered the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Language syntax (literal, functions, currying)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The virtual DOM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Elm architecture&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ports&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Elm community&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we had quite a lot of ground to cover, the talk ended up a bit too long (it&amp;#8217;s rather hard to cover a language from scratch within 45 minutes ~ 1 hour), but I think it was well received and I got some good feedback.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_slides-and-demos&quot;&gt;Slides and demos&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During the talk, I did a bunch of demos (including a live one), as I think it is sometimes the most effective way of explaining particular aspects of a language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are interested, the &lt;a href=&quot;https://github.com/kafecho/Lambda-Luminaries-Meetup-2017/blob/master/slides.md&quot;&gt;slides&lt;/a&gt; (made with &lt;strong&gt;Deckset&lt;/strong&gt;) and &lt;a href=&quot;https://github.com/kafecho/Lambda-Luminaries-Meetup-2017/tree/master/Demos&quot;&gt;demos&lt;/a&gt; are available on Github.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular I did the following demos (refer to the particular files in the Git repo):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;HelloMeetup.elm: a simple app to illustrate how to build up a &lt;strong&gt;static&lt;/strong&gt; page via the Virtual DOM.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Angular.elm: to illustrate how to implement Angular-style binding in Elm using the Elm architecture. The Elm code ends up being quite long, but with &lt;strong&gt;0% magic&lt;/strong&gt; in it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weather.elm: an Elm app which talks HTTP to the Yahoo Weather API to fetch and display the weather for some South Africa cities. This demonstrates how to use the Elm architecture for calling out to an HTTP service.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Trailer.elm: a simple Elm app using ports to control HTML5 video playback via keyboard events (play/pause/skip frames, etc&amp;#8230;&amp;#8203;). Kudos to &lt;a href=&quot;http://vincent.jousse.org/en/tech/interacting-with-dom-element-using-elm-audio-video/&quot;&gt;Vincent Jousse&lt;/a&gt; for the inspiration.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we normally give away prizes at each Lambda Luminaries Meetup (JetBrains license, Manning eBooks), I wrote a prize draw app in Elm to pick winners at random (&lt;a href=&quot;https://github.com/kafecho/Lambda-Luminaries-Meetup-2017/blob/master/Demos/PrizeDraw.elm&quot; class=&quot;bare&quot;&gt;https://github.com/kafecho/Lambda-Luminaries-Meetup-2017/blob/master/Demos/PrizeDraw.elm&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The app uses the Random side-effect facility built-in the Elm architecture to pick a winner at random (from the list of Meetup participants).
The winner can then accept or refuse the prize. The process continues until all the prizes have been given away.
It&amp;#8217;s nothing too complicated, but I like that there is a clearly defined model (albeit small) and a well defined set of union types that the compiler can check out for.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the-making-of&quot;&gt;The making of&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A couple of observations. While working on the demos, I relied heavily on the Elm compiler to fix my mistakes.
Most of the time, I would just refactor the code until it compiled and in most cases, it would just work the 1st time it compiled.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Weather demo involved making HTTP calls and JSON decoding which I did struggle with at times.
I found that I had to result to Elm Debug to understand what was going.
Compared with Vanilla JS, this part of Elm felt too complicated, especially when you are used to Ajax and just poking inside JSON until you find what you want.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The port demo (Trailer.elm) turned out to be quite simple with not too much JS boiler plate involved.
Relying on Elm to handle the state and events and Vanilla JS to be a pure render engine worked out quite well in this case.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Sat, 13 May 2017 00:00:00 +0200</pubDate>
        <link>http://www.soundcode.co.za/elm/2017/05/13/introduction-to-elm.html</link>
        <guid isPermaLink="true">http://www.soundcode.co.za/elm/2017/05/13/introduction-to-elm.html</guid>
        
        
        <category>Elm</category>
        
      </item>
    
      <item>
        <title>Scala lightning talk at the Java Jozi JUG</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I gave yet another Scala intro talk at the Java Jozi JUG. It had been a while since my last Scala talk, and while preparing for it, I realized how my Scala coding style has changed over the years.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The 2017 edition definitely has a strong &lt;strong&gt;Functional Programming&lt;/strong&gt; flavour :-)
The slides are very high level and cover a tiny spectrum of the language.
There are here: &lt;a href=&quot;http://www.soundcode.co.za/assets/presentations/scala-in-15-minutes-jozi-jug-30-01-2017.pdf&quot; class=&quot;bare&quot;&gt;http://www.soundcode.co.za/assets/presentations/scala-in-15-minutes-jozi-jug-30-01-2017.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 30 Jan 2017 00:00:00 +0200</pubDate>
        <link>http://www.soundcode.co.za/scala/java/jug/2017/01/30/scala-lightning-talk.html</link>
        <guid isPermaLink="true">http://www.soundcode.co.za/scala/java/jug/2017/01/30/scala-lightning-talk.html</guid>
        
        
        <category>Scala</category>
        
        <category>Java</category>
        
        <category>JUG</category>
        
      </item>
    
      <item>
        <title>The Batmanacci Sequence</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Or how to visualise the Fibonacci sequence with Batman (spoilers: stupid example ahead).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Fibonacci sequence (&lt;a href=&quot;https://en.wikipedia.org/wiki/Fibonacci_number&quot; class=&quot;bare&quot;&gt;https://en.wikipedia.org/wiki/Fibonacci_number&lt;/a&gt;) is apparently what happens to rabbits when they have too much spare time.
They start reproducing &lt;strong&gt;ad infinitum&lt;/strong&gt; according to some strict formula (or at least, this is what Mathematicians would like you to believe).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are many ways to compute the Fibonacci sequence. In Elm you can use recursion with pattern matching like so:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color: #0000FF&quot;&gt;fibonacci&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Int&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Int&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;fibonacci&lt;/span&gt; n &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;case&lt;/span&gt; n &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;of&lt;/span&gt;
        &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;
        &lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;
        &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;_&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt;
            fibonacci (n &lt;span style=&quot;color: #666666&quot;&gt;-&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;) &lt;span style=&quot;color: #666666&quot;&gt;+&lt;/span&gt; fibonacci (n &lt;span style=&quot;color: #666666&quot;&gt;-&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;2&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The function below simply computes the number of &lt;strong&gt;rabbits&lt;/strong&gt; after &lt;strong&gt;n&lt;/strong&gt; steps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_batmanacci&quot;&gt;Batmanacci&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Batmanacci is just a visualisation of the Fibonacci sequence using images to show you how many Batmans (or Batmen) they would be at each step.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To do so, I wrote a simple function that renders a div with the correct number of Batmen in it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color: #0000FF&quot;&gt;batmanacci&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Int&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Html&lt;/span&gt; msg
&lt;span style=&quot;color: #0000FF&quot;&gt;batmanacci&lt;/span&gt; step &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt;
    div
        [ style [ ( &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;border&amp;quot;&lt;/span&gt;, &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;1px dotted grey&amp;quot;&lt;/span&gt; ) ]
        ]
        (br &lt;span style=&quot;color: #B00040&quot;&gt;[]&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;[]&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;::&lt;/span&gt; text (toString step) &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;::&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;List&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;repeat (fibonacci step) batmanImage)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So given a step value, the function above would generate an HTML div which has the correct number of Batmen according to the Fibonacci sequence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What I really want though, it to show, how the sequence evolves, so for a given step &lt;strong&gt;n&lt;/strong&gt;, I want to display what the sequence would look like at step 0, 1, 2, up to &lt;strong&gt;n&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using Elm&amp;#8217;s functional programming, it is really easy and I can just write something like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color: #0000FF&quot;&gt;div&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;[]&lt;/span&gt; (&lt;span style=&quot;color: #B00040&quot;&gt;List&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;range &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt; model&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;nbSteps &lt;span style=&quot;color: #666666&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;List&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;map batmanacci)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I use the &lt;strong&gt;|&amp;gt;&lt;/strong&gt; pipe operator as I find the code easier to read than the normal&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color: #B00040&quot;&gt;List&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;map batmanacci (&lt;span style=&quot;color: #B00040&quot;&gt;List&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;range &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt; model&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;nbSteps)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Where model.nbSteps is where I keep track of how many steps to display on the UI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To tie everything together, I just add an input field to capture the number of steps (and the rest is just normal Elm-architecture stuff).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is what is looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot; /assets/images/Batmanacci.png&quot; alt=&quot;Batmanacci&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the-code&quot;&gt;The code&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code in its entirety looks like the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;module&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;Main&lt;/span&gt; exposing (&lt;span style=&quot;color: #666666&quot;&gt;..&lt;/span&gt;)

&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;Html&lt;/span&gt; exposing (&lt;span style=&quot;color: #666666&quot;&gt;..&lt;/span&gt;)
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;Html.Attributes&lt;/span&gt; exposing (&lt;span style=&quot;color: #666666&quot;&gt;..&lt;/span&gt;)
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;Html.Events&lt;/span&gt; exposing (&lt;span style=&quot;color: #666666&quot;&gt;..&lt;/span&gt;)
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;List&lt;/span&gt; exposing (&lt;span style=&quot;color: #666666&quot;&gt;..&lt;/span&gt;)


&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;-- A tiny LEGO batman image&lt;/span&gt;


&lt;span style=&quot;color: #0000FF&quot;&gt;batmanImage&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt;
    &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;-- img [ src &amp;quot;Batclock.jpeg&amp;quot;, width 50 ] []&lt;/span&gt;
    img [ src &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;http://argos.scene7.com/is/image/Argos/2556026_R_Z001A?fmt=pjpg&amp;amp;wid=1240&amp;amp;hei=1116&amp;quot;&lt;/span&gt;, width &lt;span style=&quot;color: #666666&quot;&gt;50&lt;/span&gt; ] &lt;span style=&quot;color: #B00040&quot;&gt;[]&lt;/span&gt;



&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;-- The model keeps track of the number of steps in the Batmanacci sequence&lt;/span&gt;


&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;type&lt;/span&gt; alias &lt;span style=&quot;color: #B00040&quot;&gt;Model&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt;
    { nbSteps &lt;span style=&quot;color: #B00040&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Int&lt;/span&gt;
    }


&lt;span style=&quot;color: #0000FF&quot;&gt;model&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Model&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;model&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt;
    { nbSteps &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt; }



&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;-- Recursive function to compute the Fibonacci sequence&lt;/span&gt;


&lt;span style=&quot;color: #0000FF&quot;&gt;fibonacci&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Int&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Int&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;fibonacci&lt;/span&gt; n &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;case&lt;/span&gt; n &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;of&lt;/span&gt;
        &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;

        &lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;

        &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;_&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt;
            fibonacci (n &lt;span style=&quot;color: #666666&quot;&gt;-&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;) &lt;span style=&quot;color: #666666&quot;&gt;+&lt;/span&gt; fibonacci (n &lt;span style=&quot;color: #666666&quot;&gt;-&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;2&lt;/span&gt;)



&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;-- Given a Fibonacci step, render as many Batmans as required&lt;/span&gt;


&lt;span style=&quot;color: #0000FF&quot;&gt;batmanacci&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Int&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Html&lt;/span&gt; msg
&lt;span style=&quot;color: #0000FF&quot;&gt;batmanacci&lt;/span&gt; step &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt;
    div
        [ style [ ( &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;border&amp;quot;&lt;/span&gt;, &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;1px dotted grey&amp;quot;&lt;/span&gt; ) ]
        ]
        (br &lt;span style=&quot;color: #B00040&quot;&gt;[]&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;[]&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;::&lt;/span&gt; text (toString step) &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;::&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;List&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;repeat (fibonacci step) batmanImage)


&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;type&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Msg&lt;/span&gt;
    &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;NbSteps&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Int&lt;/span&gt;


&lt;span style=&quot;color: #0000FF&quot;&gt;update&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Msg&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Model&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Model&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;update&lt;/span&gt; msg model &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;case&lt;/span&gt; msg &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;of&lt;/span&gt;
        &lt;span style=&quot;color: #B00040&quot;&gt;NbSteps&lt;/span&gt; i &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt;
            { model &lt;span style=&quot;color: #666666&quot;&gt;|&lt;/span&gt; nbSteps &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; i }


&lt;span style=&quot;color: #0000FF&quot;&gt;view&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Model&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Html&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Msg&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;view&lt;/span&gt; model &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt;
    div &lt;span style=&quot;color: #B00040&quot;&gt;[]&lt;/span&gt;
        [ input
            [ placeholder &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Nb steps&amp;quot;&lt;/span&gt;
            , onInput (&lt;span style=&quot;color: #0000FF&quot;&gt;\&lt;/span&gt;s &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;String&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;toInt s &lt;span style=&quot;color: #666666&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Result&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;withDefault &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Basics&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;max &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;NbSteps&lt;/span&gt;)
            ]
            &lt;span style=&quot;color: #B00040&quot;&gt;[]&lt;/span&gt;
          &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;-- render all the Batmans from 0 up to the number steps&lt;/span&gt;
        , div &lt;span style=&quot;color: #B00040&quot;&gt;[]&lt;/span&gt; (&lt;span style=&quot;color: #B00040&quot;&gt;List&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;range &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt; model&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;nbSteps &lt;span style=&quot;color: #666666&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;List&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;map batmanacci)
        ]


&lt;span style=&quot;color: #0000FF&quot;&gt;main&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt;
    beginnerProgram
        { model &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; model
        , view &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; view
        , update &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; update
        }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_live-demo&quot;&gt;Live demo&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since publishing this post, I&amp;#8217;ve made some changes to the code to make it funkier and more user friendly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Have a look at a live demo at: &lt;a href=&quot;https://runelm.io/c/5xr&quot; class=&quot;bare&quot;&gt;https://runelm.io/c/5xr&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Thu, 08 Dec 2016 00:00:00 +0200</pubDate>
        <link>http://www.soundcode.co.za/elm/javascript/functionalprogramming/fibonacci/2016/12/08/the-batmanacci-sequence.html</link>
        <guid isPermaLink="true">http://www.soundcode.co.za/elm/javascript/functionalprogramming/fibonacci/2016/12/08/the-batmanacci-sequence.html</guid>
        
        
        <category>Elm</category>
        
        <category>JavaScript</category>
        
        <category>FunctionalProgramming</category>
        
        <category>Fibonacci</category>
        
      </item>
    
      <item>
        <title>Running ad-hoc roles with Ansible</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post, I will talk about a technique I use to run ad-hoc roles on a bunch of machines with Ansible. It&amp;#8217;s like a meta-playbook for running any roles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_a-bit-of-context&quot;&gt;A bit of context&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ansible &lt;strong&gt;roles&lt;/strong&gt; (&lt;a href=&quot;http://docs.ansible.com/ansible/playbooks_roles.html#roles&quot; class=&quot;bare&quot;&gt;http://docs.ansible.com/ansible/playbooks_roles.html#roles&lt;/a&gt;) are a very nice construct that provide LEGO-style building blocks that are useful when deploying software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, I&amp;#8217;ve designed quite a few roles to deploy a bunch of things, including:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Oracle JDKs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solr (which needs a JDK)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SolrCloud (which needs Solr)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zookeeper (which needs a JDK)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HAProxy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keepalived (to create a failover cluster of things)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Those roles can be combined to create a load-balanced cluster of SolrCloud instances where the load-balancers themselves are resilient.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Like LEGO, you can combine the roles in different ways.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example to install Logstash, I install an Oracle JDK role.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To install a fail-over cluster of CouchDB nodes, I deploy a CouchDB role combined with the Keepalived role, and so on and so forth.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Normally, to run a role you have to include it in a playbook, but sometimes &lt;strong&gt;all you really want&lt;/strong&gt; is to be able to deploy a role on a bunch of machines &lt;strong&gt;without having to craft a playbook&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the-solution&quot;&gt;The solution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Caveat: &lt;em&gt;someone&amp;#8217;s elegant solution could be considered a hack by somebody else&lt;/em&gt; :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So I created a generic playbook (let&amp;#8217;s call this deploy-role.yaml) that looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;---&lt;/span&gt;
- hosts: all
  sudo: yes
  roles:
  - &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;{{&lt;/span&gt;&lt;span style=&quot;color: #19177C&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;role&lt;/span&gt;&lt;span style=&quot;color: #19177C&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;}}&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Given an inventory file, you can then deploy any arbitrary role like so:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;ansible-playbook -i myInventory deploy-role.yaml -e &quot;role=tcpdump&quot; -l linux-monitored-hosts&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This line specifies which role to deploy:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;-e &quot;role=tcpdump&quot;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This line specifies (or &lt;strong&gt;limits&lt;/strong&gt;) what machines to apply the role to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;-l linux-monitored-hosts&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is another example to setup a JDK8 on a bunch of machines:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;ansible-playbook -i inventory deploy-role.yaml -e &quot;role=oracle-jdk8&quot; -l linux-monitored-hosts&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It feels a bit &lt;strong&gt;hacky&lt;/strong&gt;, but it works.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Thu, 17 Nov 2016 00:00:00 +0200</pubDate>
        <link>http://www.soundcode.co.za/ansible/devops/2016/11/17/ad-hoc-ansible-role.html</link>
        <guid isPermaLink="true">http://www.soundcode.co.za/ansible/devops/2016/11/17/ad-hoc-ansible-role.html</guid>
        
        
        <category>Ansible</category>
        
        <category>DevOps</category>
        
      </item>
    
      <item>
        <title>Learning Elm</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Or as Trump would say, &lt;strong&gt;Make JS great again?&lt;/strong&gt; In this post, I will tell you a bit about my foray into FP for front-end web applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_a-bit-of-context&quot;&gt;A bit of context&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: I quite like JavaScript and I think that some of the modern Web APIs (media source extension, web audio api) are really cool, especially when you work in the media domain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve written some JavaScript applications (some are used in production in various places), but they all tend to be rather small.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Having worked on a non-trivial Angular.js stack, I have a &lt;strong&gt;gut feeling&lt;/strong&gt; that JavaScript does not scale very well with complexity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This could very well be due to the fact that I am mostly a server-side engineer.
Having used FP/ typed languages before, I had no issue (or stress) working on large codebases knowing the compiler will do its best to rescue my failing brain.
I could not say the same about large JS codebases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I think browsers are cool (they are the ultimate platform for running apps; the Web is ubiquitous after all).
And some people are really gifted at writing front-end JS code, but I feel that this approach would not work for me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So in my spare time, as a research experiment, I&amp;#8217;ve been looking at other options.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_enter-elm&quot;&gt;Enter Elm&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Elm (&lt;a href=&quot;http://elm-lang.org/&quot; class=&quot;bare&quot;&gt;http://elm-lang.org/&lt;/a&gt;) combines a bunch of ideas in one neatly put together package that you can use for building front-end web apps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;it is a typed functional programming language ( a la Haskell ) that compiles down to JavaScript&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;things in Elm are immutable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it implements a virtual DOM which is very fast&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;errors should be detected at compile-time instead of throwing exceptions at runtime&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Elm has a very opinionated idea of what a web-app should be architected (this is called the Elm architecture &lt;a href=&quot;http://guide.elm-lang.org/architecture/&quot; class=&quot;bare&quot;&gt;http://guide.elm-lang.org/architecture/&lt;/a&gt; ) and it is roughly based on the following ideas:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;you have an immutable model&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;you render the model via a virtual DOM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;user inputs or other external events will trigger changes to the model ( i.e. a new model is created from the old one) which will trigger updates to the virtual DOM.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and repeat the loop&amp;#8230;&amp;#8203;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In some ways, this is very similar to how React + Redux work (well actually Redux was inspired by Elm).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a starting point, I recommend reading &lt;a href=&quot;http://guide.elm-lang.org/&quot; class=&quot;bare&quot;&gt;http://guide.elm-lang.org/&lt;/a&gt; as it gives a good overview of what Elm can do.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_some-examples&quot;&gt;Some examples&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_hello-world&quot;&gt;Hello world&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is what a Hello world looks like in Elm:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;Html&lt;/span&gt; exposing (&lt;span style=&quot;color: #666666&quot;&gt;..&lt;/span&gt;)

&lt;span style=&quot;color: #0000FF&quot;&gt;main&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt;
  text &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Hello, world&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the simplest case, main is a &lt;strong&gt;function&lt;/strong&gt; that creates a virtual DOM (which Elm eventually renders on the screen).
Instead of writing HTML using the usual tags, you use functions from the &lt;strong&gt;Html&lt;/strong&gt; module to create the virtual DOM.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because you are combining functions, it is trivial to refactor how the DOM is constructed, for example:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_refactor-the-dom&quot;&gt;Refactor the DOM&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;Html&lt;/span&gt; exposing (&lt;span style=&quot;color: #666666&quot;&gt;..&lt;/span&gt;)
&lt;span style=&quot;color: #0000FF&quot;&gt;user&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Guillaume&amp;quot;&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;main&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt;
  text ( &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;++&lt;/span&gt; user )&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What is nice about this code, is that it is actually compiled, so if you make a minor mistake the compiler will barf at you, for example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;Html&lt;/span&gt; exposing (&lt;span style=&quot;color: #666666&quot;&gt;..&lt;/span&gt;)
&lt;span style=&quot;color: #0000FF&quot;&gt;usr&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Guillaume&amp;quot;&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;main&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt;
  text ( &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;++&lt;/span&gt; user )&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The compiler will warn you with a pretty good error message, showing you what the issue might be:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;text&quot;&gt;Detected errors in 1 module.

-- NAMING ERROR ------------------------------------------------ hello-world.elm

Cannot find variable `user`

4|   text ( &amp;quot;Hello &amp;quot; ++ user )
                        ^^^^
Maybe you want one of the following?

    usr&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_more-complex-constructs&quot;&gt;More complex constructs&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even when building the virtual DOM, you have access to all the language constructs, so here is how you build a page where the same element appears many times.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;Html&lt;/span&gt; exposing (&lt;span style=&quot;color: #666666&quot;&gt;..&lt;/span&gt;)
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;List&lt;/span&gt;

&lt;span style=&quot;color: #0000FF&quot;&gt;user&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Guillaume&amp;quot;&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;nbTimes&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;20&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;main&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt;
  div&lt;span style=&quot;color: #B00040&quot;&gt;[]&lt;/span&gt;(
    &lt;span style=&quot;color: #B00040&quot;&gt;List&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;repeat nbTimes (div&lt;span style=&quot;color: #B00040&quot;&gt;[]&lt;/span&gt;[text ( &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;++&lt;/span&gt; user )])
  )&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can try this at: &lt;a href=&quot;http://elm-lang.org/try&quot; class=&quot;bare&quot;&gt;http://elm-lang.org/try&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_angular-style-binding&quot;&gt;Angular style binding&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to build more complex app, we need to start making use of the Elm architecture, namely:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;define a model&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;define how this model can be updated&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;define how this model can be rendered&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So we can build a simple page with a text field to update the Hello message as the user types.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It will look like the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;Html&lt;/span&gt; exposing (&lt;span style=&quot;color: #666666&quot;&gt;..&lt;/span&gt;)
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;Html.Attributes&lt;/span&gt; exposing (&lt;span style=&quot;color: #666666&quot;&gt;..&lt;/span&gt;)
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;Html.Events&lt;/span&gt; exposing (onInput)
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;Html.App&lt;/span&gt;

&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;-- MODEL&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;type&lt;/span&gt; alias &lt;span style=&quot;color: #B00040&quot;&gt;Model&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;String&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;model&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Model&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;model&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;-- Type of messages&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;type&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Msg&lt;/span&gt;
  &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Name&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;String&lt;/span&gt;

&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;-- Update&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;update&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Msg&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Model&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Model&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;update&lt;/span&gt; msg model &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;case&lt;/span&gt; msg &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;of&lt;/span&gt;
    &lt;span style=&quot;color: #B00040&quot;&gt;Name&lt;/span&gt; n &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt; n

&lt;span style=&quot;color: #0000FF&quot;&gt;view&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Model&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Html&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Msg&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;view&lt;/span&gt; model &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt;
  div&lt;span style=&quot;color: #B00040&quot;&gt;[]&lt;/span&gt;[
    input [ placeholder &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Your name&amp;quot;&lt;/span&gt;, onInput &lt;span style=&quot;color: #B00040&quot;&gt;Name&lt;/span&gt; ]&lt;span style=&quot;color: #B00040&quot;&gt;[]&lt;/span&gt;,
    div&lt;span style=&quot;color: #B00040&quot;&gt;[]&lt;/span&gt;[
      text (&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;++&lt;/span&gt; model )
    ]
  ]

&lt;span style=&quot;color: #0000FF&quot;&gt;main&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt;
    &lt;span style=&quot;color: #B00040&quot;&gt;Html&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #B00040&quot;&gt;App&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;beginnerProgram {
    model &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; model,
    view &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; view,
    update &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; update }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So in plain english, &lt;em&gt;we define an explicit model, and update and a view. When the user updates the view, it generates a message to update the model, which then updates the view.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Coming from JavaScript, the signature of the functions might look a bit weird, but basically Elm functions only have 1 parameter so:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;update : Msg -&amp;gt; Model -&amp;gt; Model&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Is a function which takes a Msg then returns a function which takes Model than returns a function which returns a Model. Pfffff
This sounds a bit like &lt;strong&gt;Inception&lt;/strong&gt; but it is actually called &lt;strong&gt;function currying&lt;/strong&gt;. More information at &lt;a href=&quot;https://www.reddit.com/r/elm/comments/3jtj7s/how_do_i_read_these_function_typings/&quot; class=&quot;bare&quot;&gt;https://www.reddit.com/r/elm/comments/3jtj7s/how_do_i_read_these_function_typings/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But in plain english: &lt;em&gt;the update function takes a Msg &lt;strong&gt;AND&lt;/strong&gt; a Model &lt;strong&gt;AND then&lt;/strong&gt; returns a &lt;strong&gt;new&lt;/strong&gt; model.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_angular-style-binding-part-deux&quot;&gt;Angular style binding (part deux)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To make this more exciting we can add a second input field where the user can enter how many times the welcome message should be repeated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To do that, we have to refactor our Model a bit, and also our update function.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our model has to become a &lt;strong&gt;record&lt;/strong&gt; (think &lt;strong&gt;typed JSON&lt;/strong&gt;) so it can hold multiple fields, like so:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;type&lt;/span&gt; alias &lt;span style=&quot;color: #B00040&quot;&gt;Model&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt;  { name&lt;span style=&quot;color: #B00040&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;String&lt;/span&gt;, nbTimes&lt;span style=&quot;color: #B00040&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Int&lt;/span&gt; }
&lt;span style=&quot;color: #0000FF&quot;&gt;model&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Model&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;model&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; { name &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, nbTimes &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we need new messages to update the name or the number of times it should appear, like so:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;type&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Msg&lt;/span&gt;
  &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Name&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;String&lt;/span&gt;
  &lt;span style=&quot;color: #666666&quot;&gt;|&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;NbTimes&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;String&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The update function becomes more complicated because we have to handle more messages:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color: #0000FF&quot;&gt;update&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Msg&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Model&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Model&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;update&lt;/span&gt; msg model &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;case&lt;/span&gt; msg &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;of&lt;/span&gt;
    &lt;span style=&quot;color: #B00040&quot;&gt;Name&lt;/span&gt; newName &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt;
      { model &lt;span style=&quot;color: #666666&quot;&gt;|&lt;/span&gt; name &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; newName }
    &lt;span style=&quot;color: #B00040&quot;&gt;NbTimes&lt;/span&gt; s &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt;
      { model &lt;span style=&quot;color: #666666&quot;&gt;|&lt;/span&gt; nbTimes &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Result&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;withDefault &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt; (&lt;span style=&quot;color: #B00040&quot;&gt;String&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;toInt s) }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In case this is not obvious, the model is not updated in place.
We create a new version of the model with the updated fields.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And finally, we modify our view to dynamically create entries based on the text and the number of repetitions, like so:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;Html&lt;/span&gt; exposing (&lt;span style=&quot;color: #666666&quot;&gt;..&lt;/span&gt;)
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;Html.Attributes&lt;/span&gt; exposing (&lt;span style=&quot;color: #666666&quot;&gt;..&lt;/span&gt;)
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;Html.Events&lt;/span&gt; exposing (onInput)
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;Html.App&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;String&lt;/span&gt;

&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;-- MODEL&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;type&lt;/span&gt; alias &lt;span style=&quot;color: #B00040&quot;&gt;Model&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt;  { name&lt;span style=&quot;color: #B00040&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;String&lt;/span&gt;, nbTimes&lt;span style=&quot;color: #B00040&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Int&lt;/span&gt; }
&lt;span style=&quot;color: #0000FF&quot;&gt;model&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Model&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;model&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; { name &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, nbTimes &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;}

&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;-- Type of messages&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;type&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Msg&lt;/span&gt;
  &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Name&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;String&lt;/span&gt;
  &lt;span style=&quot;color: #666666&quot;&gt;|&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;NbTimes&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;String&lt;/span&gt;

&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;-- Update&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;update&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Msg&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Model&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Model&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;update&lt;/span&gt; msg model &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;case&lt;/span&gt; msg &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;of&lt;/span&gt;
    &lt;span style=&quot;color: #B00040&quot;&gt;Name&lt;/span&gt; newName &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt;
      { model &lt;span style=&quot;color: #666666&quot;&gt;|&lt;/span&gt; name &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; newName }
    &lt;span style=&quot;color: #B00040&quot;&gt;NbTimes&lt;/span&gt; s &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt;
      { model &lt;span style=&quot;color: #666666&quot;&gt;|&lt;/span&gt; nbTimes &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Result&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;withDefault &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt; (&lt;span style=&quot;color: #B00040&quot;&gt;String&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;toInt s) }

&lt;span style=&quot;color: #0000FF&quot;&gt;view&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Model&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Html&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;Msg&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;view&lt;/span&gt; model &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt;
  div&lt;span style=&quot;color: #B00040&quot;&gt;[]&lt;/span&gt;[
    input [ placeholder &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Your name&amp;quot;&lt;/span&gt;, onInput &lt;span style=&quot;color: #B00040&quot;&gt;Name&lt;/span&gt; ]&lt;span style=&quot;color: #B00040&quot;&gt;[]&lt;/span&gt;
    ,input [ placeholder &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;How many?&amp;quot;&lt;/span&gt;, onInput &lt;span style=&quot;color: #B00040&quot;&gt;NbTimes&lt;/span&gt; ]&lt;span style=&quot;color: #B00040&quot;&gt;[]&lt;/span&gt;
    ,div&lt;span style=&quot;color: #B00040&quot;&gt;[]&lt;/span&gt;(
      &lt;span style=&quot;color: #B00040&quot;&gt;List&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;repeat (model&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;nbTimes) (div&lt;span style=&quot;color: #B00040&quot;&gt;[]&lt;/span&gt;[text (&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;++&lt;/span&gt; model&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;name )])
    )
  ]

&lt;span style=&quot;color: #0000FF&quot;&gt;main&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt;
    &lt;span style=&quot;color: #B00040&quot;&gt;Html&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #B00040&quot;&gt;App&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;beginnerProgram {
    model &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; model,
    view &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; view,
    update &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt; update }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All this code is type-checked and compiled so no nasty surprises at runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_parting-words&quot;&gt;Parting words&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve only scratched the surface with Elm, I have plenty more to learn, but so far it feels like a nice little language (and I like its friendly community).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I do like the fact that the update loop is explicit (no binding magic) and that everything is compiled (I made about 4 errors while writing this simple example above), but after that, no runtime surprises.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Elm might take a while to get used to if you come from an imperative programming background.
It aims at being as pure as possible so the way you handle side effects (like keypresses, field inputs or even dates) might seem odd coming from vanilla JS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But so far I like it, but that is just me, so &lt;strong&gt;YMMV&lt;/strong&gt; like they say.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Tue, 08 Nov 2016 00:00:00 +0200</pubDate>
        <link>http://www.soundcode.co.za/elm/javascript/functionalprogramming/2016/11/08/learning-elm.html</link>
        <guid isPermaLink="true">http://www.soundcode.co.za/elm/javascript/functionalprogramming/2016/11/08/learning-elm.html</guid>
        
        
        <category>Elm</category>
        
        <category>JavaScript</category>
        
        <category>FunctionalProgramming</category>
        
      </item>
    
      <item>
        <title>Hello, World</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hello, World! It&amp;#8217;s been a while :-) After a rather long hiatus, I&amp;#8217;ve decided to resume blogging. This time around, since we are in 2016, well &lt;strong&gt;almost 2017&lt;/strong&gt;, I am trying &lt;strong&gt;new&lt;/strong&gt; tech: a static blog generated with Jekyll (&lt;a href=&quot;https://jekyllrb.com/&quot; class=&quot;bare&quot;&gt;https://jekyllrb.com/&lt;/a&gt;) and hosted on Github pages (&lt;a href=&quot;https://pages.github.com/&quot; class=&quot;bare&quot;&gt;https://pages.github.com/&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok, It&amp;#8217;s not really that new, but I am just playing catch-up with the cool kids.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_why-jekyll&quot;&gt;Why Jekyll?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since I &lt;strong&gt;mostly&lt;/strong&gt; blog about technical work, I&amp;#8217;ve decided to go with Jekyll as it supports Asciidoc (&lt;a href=&quot;http://www.methods.co.nz/asciidoc/&quot; class=&quot;bare&quot;&gt;http://www.methods.co.nz/asciidoc/&lt;/a&gt;) fairly well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I also happen to write a lot of work documentation with asciidoctor (&lt;a href=&quot;http://asciidoctor.org/&quot; class=&quot;bare&quot;&gt;http://asciidoctor.org/&lt;/a&gt;) so I can write plenty of things like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;def&lt;/span&gt; helloFromScala&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;String&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;Html&lt;/span&gt; exposing (&lt;span style=&quot;color: #666666&quot;&gt;..&lt;/span&gt;)
&lt;span style=&quot;color: #0000FF&quot;&gt;main&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;=&lt;/span&gt;
  text &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;git clone http://deathstar.git&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8230;&amp;#8203;and it &lt;strong&gt;should&lt;/strong&gt; all render beautifully :-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_not-just-work&quot;&gt;Not just work&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But life is not all about work, so hopefully I will write about travelling through South Africa, my attempts at (re) learning the piano, (re) playing the drum kit, learning photography.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And we might even talk about some cool Caribbean recipes (who&amp;#8217;s heard of sauce chien before: &lt;a href=&quot;http://andrewzimmern.com/2015/05/18/sauce-chien/&quot; class=&quot;bare&quot;&gt;http://andrewzimmern.com/2015/05/18/sauce-chien/&lt;/a&gt; ? )&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So stay tune for more.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Tue, 08 Nov 2016 00:00:00 +0200</pubDate>
        <link>http://www.soundcode.co.za/hello/2016/11/08/hello-world.html</link>
        <guid isPermaLink="true">http://www.soundcode.co.za/hello/2016/11/08/hello-world.html</guid>
        
        
        <category>Hello</category>
        
      </item>
    
      <item>
        <title>How to stress test CouchDB with Gatling</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post, I am going to show you how to use Gatling (&lt;a href=&quot;http://gatling.io/&quot; class=&quot;bare&quot;&gt;http://gatling.io/&lt;/a&gt;) to test the performance of CouchDB&amp;#8217;s HTTP operations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Warning: this is an &lt;strong&gt;old&lt;/strong&gt; blog post which was originally posted on my Blogspot blog &lt;a href=&quot;http://kafecho.blogspot.co.za/&quot; class=&quot;bare&quot;&gt;http://kafecho.blogspot.co.za/&lt;/a&gt;
The content and techniques described below are mostly out of date. &lt;strong&gt;Tech moves fast, and I am getting older.&lt;/strong&gt; :-)&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what-is-gatling&quot;&gt;What is Gatling?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Gatling is an HTTP performance tool written in Scala with the Akka and Netty toolkits.
Via Akka and Netty, Gatling can generate a large amount of load, while making efficient use of threads (those libraries are all based on non-blocking I/O).
It is a JVM application, therefore, you can run it on a variety of platforms without a problem.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the-gatling-dsl&quot;&gt;The Gatling DSL&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Gatling provides you with a Domain Specific Language for writing simulations to generate load on (among other things) HTTP-based services such as CouchDB.
The DSL is written in Scala and provides a fluent interface.
It provides convenience mechanisms for triggering HTTP methods (GET, PUT, POST, DELETE), as well as simulating wait times and &quot;arrival&quot; times of user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve put together a sample Maven project which illustrates one approach for running Gatling stress tests via the command line.
Have a look at: &lt;a href=&quot;https://github.com/kafecho/gatling-couchdb-simulations&quot; class=&quot;bare&quot;&gt;https://github.com/kafecho/gatling-couchdb-simulations&lt;/a&gt;.
You only need Apache Maven and a JDK to run the sample.
Gatling embeds a version of the Scala compiler so you don&amp;#8217;t need to have one running.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The sample project contains a single simulation which does the following against a CouchDB server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Each synthetic user creates a database&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each synthetic user proceeds to add a number of JSON docs to that database&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once documents have been added, each synthetic user deletes the database&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You fill find further instruction on the Github page on how to run the simulation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_gatling-output&quot;&gt;Gatling output&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Gatling produces nice charts with details about response time and throughput (even for specific HTTP operations) so it gives you and idea of what the performance and bottlenecks are.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are some examples:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot; /assets/images/gatling1.png&quot; alt=&quot;gatling1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot; /assets/images/gatling2.png&quot; alt=&quot;gatling2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot; /assets/images/gatling3.png&quot; alt=&quot;gatling3&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previously, I had used similar simulations to stress-test BigCouch clusters and the code can be reused out of the box to test CouchDB 2.0 clusters.
I&amp;#8217;ve also shared some Ansible recipes to make the deployment of CouchDB 2.0 a bit easier.
Have a look at &lt;a href=&quot;https://github.com/kafecho/ansible-couchdb2&quot; class=&quot;bare&quot;&gt;https://github.com/kafecho/ansible-couchdb2&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Sun, 31 Jan 2016 00:00:00 +0200</pubDate>
        <link>http://www.soundcode.co.za/couchdb/gatling/scala/akka/2016/01/31/how-to-stress-test-couchdb-with-gatling.html</link>
        <guid isPermaLink="true">http://www.soundcode.co.za/couchdb/gatling/scala/akka/2016/01/31/how-to-stress-test-couchdb-with-gatling.html</guid>
        
        
        <category>CouchDB</category>
        
        <category>Gatling</category>
        
        <category>Scala</category>
        
        <category>Akka</category>
        
      </item>
    
      <item>
        <title>Ansible: the installer pattern</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post, I will talk about an approach for doing configuration management in environments where the network is locked down and your target nodes don&amp;#8217;t have access to the Internet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_a-bit-of-context&quot;&gt;A bit of context&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my day job, I write software systems that help media companies (think BBC, ESPN) put together content (think news) that will be broacast to air.
Over the years, software has morphed to become ever more sophisticated with ever more moving parts.
We are no longer configuring a single executable that run on a Windows PC, we are producing systems that have to be correctly installed, configured and monitored.
I&amp;#8217;ve been investing a lot of effort with Automate-all-the-things Ansible and today, we have a rather extensive set of roles for deploying pretty much all we need, from JVMs all the way to HA clusters and monitoring tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A newsroom environment (as made popular by Aaron Sorkin&amp;#8217;s The Newsroom TV series) is a fairly controlled space. During a visit to the BBC production facility back in May this year, I had to put my laptop&amp;#8217;s power supply through a set of tests (in case it caused interferences with the broadcast signals). Likewise, there were no microwave ovens in sight in the lunch area (again, because they could issues and fry live radio transmissions). To add to the fun, in this production environment, machines tend to be locked down; they are often configured to block access to the outside world (the Internet). So your vanilla Ansible roles which download stuff from the internet won&amp;#8217;t fly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the-solution&quot;&gt;The solution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The solution we&amp;#8217;ve settled for is what I call the Ansible installer pattern. In this instance, the installer is a Linux node (I use CentOS) which contains pre-cached dependencies. The installer lives within the customer&amp;#8217;s Intranet. It runs Ansible with an Apache web server. At deployment time, the installer uses roles which instructs the target nodes to go and fetch rpms and other files from its web server (the so-called phone home pattern).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve experimented with various approaches to build the installer (all with Ansible):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;as a complete OS image (built with Vagrant / VirtualBox)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;as a docker container&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;as a self contained tar file that can be unpacked and used on any vanilla CentOS machine.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We eventually settled for the last option. In the remainder of this post, I will describe how it works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To build the installer tar file, we launch a vanilla CentOS virtual machine (think of it as a golden installer) which we configure with Ansible. Ansible creates the cache folder and then runs a bunch of roles to cache various dependencies. In addition, Ansible fetches the packages to install Apache and the packages to install itself (so the system can be bootstraped). At the end; we are left with a folder,a bunch of scripts and some Ansible playbooks used for deployment. The folder is then archived and zipped using tar. The tar archive can be copied to any plain CentOS node that can then be used as an installer. Building the tar file is fully automated using Jenkins and Ansible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To make things more concrete, let&amp;#8217;s say you want to deploy the HAProxy load balancer, with this approach, you essentially have to write 2 roles.
The purpose of the 1st role is to cache all the dependencies that are required to install HAProxy. This role is executed when the installer tar file is built. It looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;---&lt;/span&gt;
- name: cache the rpms required to install HAProxy
  shell: repotrack -p {{ rpms_root }} haproxy&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The variable rpms_root point to a fixed location (i.e. the cache).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At deployment time, we use a different role that installs HAProxy from the rpms that have been cached.
The role looks just like what you would write if the node had access to the Internet, except if uses a special purpose yum repository (here called ansible).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;---&lt;/span&gt;
- name: install HAProxy
  shell: yum install -y haproxy --disablerepo=* --enablerepo=ansible

- name: customize HAProxy to serve HTTP traffic to the designated downstream servers
  template: src=haproxy.cfg.j2 dest=/etc/haproxy/haproxy.cfg owner=haproxy group=haproxy
  notify: restart_haproxy

- name: ensure HAProxy is started and enabled at boot time
  service: name=haproxy state=started enabled=yes&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At deployment time, the installer adds the special ansible yum repository on all the target nodes. The yum repo is derived from a template that looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;ini&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;[ansible]&lt;/span&gt;
&lt;span style=&quot;color: #7D9029&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;Ansible&lt;/span&gt;
&lt;span style=&quot;color: #7D9029&quot;&gt;baseurl&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;http://{{ deployment_node_ip }}/rpms&lt;/span&gt;
&lt;span style=&quot;color: #7D9029&quot;&gt;enabled&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;1&lt;/span&gt;
&lt;span style=&quot;color: #7D9029&quot;&gt;gpgcheck&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In other words, at deployment time, each node knows where to go to find the RPM to install. deployment_node_ip points to the IP address of the installer node.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve tested this approach with CentOS nodes, but it should work (with some changes obviously, pick your favourite package manager) on other Linux distributions. I&amp;#8217;ve also tested caching and deploying Windows applications. It works quite well, but extra steps are required to download all the dependencies required to setup WinRM connections.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_pros-and-cons&quot;&gt;Pros and cons&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An obvious benefit of the installer pattern is that it makes deployments quite a bit faster since everything is pre-cached. If you have to install a large package on a set of nodes (for example, a SolrCloud cluster) then the speedups can be quite substantial. If you have to deploy a full stack (from app to monitoring on multiple nodes), then even more so. From start to finish, our complex stack takes about 7 minutes to deploy and configure. The obvious downside of the approach is that it forces you to split your deployment into 2 stages (cache and install). Testing also requires a bit more rigour as you really need to ensure that your target machines are cut of from the Internet (otherwise you might be testing the wrong thing). For that I use Vagrant to launch clusters using private networks configured with no Internet access.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most people nowadays are lucky enough to host things in the Cloud or on their own infrastructure. If you are not, and if tightly controlled environments are an issue for you, I am hoping that you&amp;#8217;ve found this post useful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As always, comments and questions are welcome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Guillaume.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Fri, 27 Nov 2015 00:00:00 +0200</pubDate>
        <link>http://www.soundcode.co.za/ansible/haproxy/devops/2015/11/27/ansible-the-installer-pattern.html</link>
        <guid isPermaLink="true">http://www.soundcode.co.za/ansible/haproxy/devops/2015/11/27/ansible-the-installer-pattern.html</guid>
        
        
        <category>Ansible</category>
        
        <category>HAProxy</category>
        
        <category>DevOps</category>
        
      </item>
    
  </channel>
</rss>
